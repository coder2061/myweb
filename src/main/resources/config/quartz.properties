#============================================================================  
#Configure Main Scheduler Properties    
#============================================================================
#调度标识名，集群中每一个实例都必须使用相同的名称 
org.quartz.scheduler.instanceName=quartzScheduler
#基于主机名和时间戳来产生实例ID，每个集群节点要有独立的instanceId 
org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.rmi.export=false
org.quartz.scheduler.rmi.proxy=false
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false

#============================================================================  
#Configure ThreadPool    
#============================================================================
#ThreadPool实现的类名 
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#线程池的容量，即表示同时最多可运行的线程数量
org.quartz.threadPool.threadCount=10
#线程优先级 
org.quartz.threadPool.threadPriority=5
#自创建父线程 
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

#============================================================================  
#Configure JobStore single  
#============================================================================ 
#数据保存方式为内存存储（默认方式，系统重新启动后，定时任务信息将会丢失）
#org.quartz.jobStore.class=org.quartz.simpl.RAMJobStore

#============================================================================  
#Configure JobStore Cluster  
#============================================================================
#数据保存方式为持久化存储（系统意外或非意外重新启动后，仍保留定时任务信息）
#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreCMT
#数据库平台为oracle
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate 
#数据库平台为mysql
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#数据库别名
org.quartz.jobStore.dataSource=quartzDB
org.quartz.jobStore.nonManagedTXDataSource=quartzDB
#表的前缀 
org.quartz.jobStore.tablePrefix=qrtz_
#设置为TRUE不会出现序列化非字符串类到 BLOB时产生的类版本问题 
org.quartz.jobStore.useProperties=true
#加入集群 
org.quartz.jobStore.isClustered=true
#调度实例失效的检查时间间隔 
org.quartz.jobStore.clusterCheckinInterval=20000 
#容许的最大作业延长时间 
org.quartz.jobStore.misfireThreshold=60000
org.quartz.jobStore.maxMisfiresToHandleAtATime=10
org.quartz.jobStore.dontSetAutoCommitFalse=false
org.quartz.jobStore.txIsolationLevelSerializable=false

#============================================================================  
#Configure dataSource    
#============================================================================
#org.quartz.dataSource.quartzDB.driver=oracle.jdbc.driver.OracleDriver  
#org.quartz.dataSource.quartzDB.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl
org.quartz.dataSource.quartzDB.driver=com.mysql.jdbc.Driver  
org.quartz.dataSource.quartzDB.URL=jdbc:mysql://127.0.0.1:3306/quartz2?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull  
org.quartz.dataSource.quartzDB.user=root  
org.quartz.dataSource.quartzDB.password=root
org.quartz.dataSource.quartzDB.maxConnections=10
#一个可选的sql查询语句，数据源可用来检测和更换失效或舞弊连接
org.quartz.dataSource.quartzDB.validationQuery=select 0 from dual

#jndi配置
#org.quartz.dataSource.quartzDB.jndiURL=DB_JNDI_URL
#是否需要每次从JNDI树上查找数据源连接
#org.quartz.dataSource.quartzDB.jndiAlwaysLookup=true
#org.quartz.dataSource.quartzDB.java.naming.factory.initial=JNDI_CTXT_FACTORY
#org.quartz.dataSource.quartzDB.java.naming.provider.url=JNDI_PROVIDER_URL
#org.quartz.dataSource.quartzDB.java.naming.security.principal=root
#org.quartz.dataSource.quartzDB.java.naming.security.credentials=root

#SchedulerPlugin定义的一般模式如下：
#org.quartz.plugin.NAME.class=PLUGIN_CLASS_NAME
#如果这个插件类有一些属性值需要通过"setter"方法设定,名称和值的属性定义如下：
#org.quartz.plugin.NAME.propName=propValue
#"propName" 在插件类中会有一个"setPropName"方法,但是只支持原始数据类型(包括 Strings)。
org.quartz.plugin.triggHistory.class=org.quartz.plugins.history.LoggingTriggerHistoryPlugin
org.quartz.plugin.triggHistory.triggerFiredMessage=Trigger {1}.{0} fired job {6}.{5} at: {4, date, HH:mm:ss MM/dd/yyyy}
org.quartz.plugin.triggHistory.triggerCompleteMessage=Trigger {1}.{0} completed firing job {6}.{5} at {4, date, HH:mm:ss MM/dd/yyyy} with resulting trigger instruction code: {9}

#org.quartz.plugin.jobInitializer.class=org.quartz.plugins.xml.JobInitializationPlugin
#org.quartz.plugin.jobInitializer.fileName=data/my_job_data.xml
#org.quartz.plugin.jobInitializer.overWriteExistingJobs=false
#org.quartz.plugin.jobInitializer.failOnFileNotFound=true

org.quartz.plugin.shutdownhook.class=org.quartz.plugins.management.ShutdownHookPlugin
org.quartz.plugin.shutdownhook.cleanShutdown=true