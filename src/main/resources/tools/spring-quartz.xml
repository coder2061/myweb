<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/task  
		http://www.springframework.org/schema/task/spring-task-3.1.xsd">
		
	<!-- 隐式地向 Spring容器注册 -->
	<task:annotation-driven/> 
    
    <!-- 线程执行器配置，用于任务注册 -->
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="100" />
		<property name="queueCapacity" value="500" />
	</bean>
    
    <!-- 添加调度的任务-bean 配置对应的调度类-class-->  
    <bean id="mySchedule" class="com.web.tools.quartz.ConfigureSchedule" />
    <!-- 
    <bean id="myQuartzSchedule" class="com.web.controller.UserController" >
    	<property name="myQuartzScheduleURL" value="localhost:8080/myweb/user/test" />
    </bean> 
     -->
     
    <!--配置调度具体执行的方法-->  
    <bean id="myScheduleDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 配置调度对象类  -->
        <property name="targetObject" ref="mySchedule" />
        <!-- 配置调度方法 -->  
        <property name="targetMethod" value="testCron" />
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->  
        <property name="concurrent" value="true" />
        <!-- shouldRecover属性为true，则当Quartz服务被中止后，再次启动任务时会尝试恢复执行之前未完成的所有任务  -->
		<!-- 
		<property name="shouldRecover" value="true" /> 
        <property name="durability" value="true"/>
		-->
    </bean>
    <bean id="myScheduleDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject" ref="mySchedule" />
        <property name="targetMethod" value="testSimple" />
        <property name="concurrent" value="true" />
    </bean>
  
    <!--配置调度执行的触发的时间-->  
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail" ref="myScheduleDetail" />  
        <!-- cron表达式 ，配置调度触发时间(在线生成工具：http://www.cronmaker.com/) -->  
        <property name="cronExpression" value="0/10 * * * * ?" />
    </bean>
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">  
        <property name="jobDetail" ref="myScheduleDetail2" />  
		<!-- 调度工厂实例化后，经过5秒开始执行调度 -->
        <property name="startDelay" value="5000" />
        <!-- 间隔时间：每10秒重复调度 -->  
		<property name="repeatInterval" value="10000" />
		<!-- 间隔时间内重复调度次数：每10秒重复调度2次 -->  
        <property name="repeatCount" value="2" />
    </bean>
  
    <!-- quartz的调度工厂 调度工厂只能有一个，多个调度任务在list中添加lazy-init='false'表容器启动就会执行调度程序  -->  
    <bean id="startQuartz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="autoStartup" value="true" />
        <!--可选，QuartzScheduler启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true"/>
		<!-- 
        <property name="dataSource" ref="dataSource" />
         -->
        <!--applicationContextSchedulerContextKey： 
         	是org.springframework.scheduling.quartz.SchedulerFactoryBean
         	这个类中把spring上下文以key/value的方式存放在了quartz的上下文中了，可以用其所定义的key得到对应的spring上下文-->
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <property name="configLocation" value="classpath:config/quartz.properties"/>
        <property name="triggers">  
            <!-- 所有的调度列表-->  
            <list>
            	<!-- 
                <ref local="cronTrigger" />
                <ref local="simpleTrigger" />
                 -->
            </list>
        </property>
    </bean>  
  
</beans>   