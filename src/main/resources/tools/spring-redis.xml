<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	<description>redis缓存</description>
	
	<!-- 隐式地向 Spring容器注册 -->
	<context:annotation-config />
	<mvc:annotation-driven />
	
	<!-- 自动扫描所有注解该路径 -->
	<context:component-scan base-package="com.web" />
	
	<!-- 引入properties配置文件 -->
    <context:property-placeholder location="classpath:config/redis.properties" ignore-unresolvable="true" />
	
	<!-- 连接池配置 --> 
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!-- 最大活跃连接数，新版取消 -->
        <!-- <property name="maxActive" value="${redis.maxActive}" /> -->
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="${redis.softMinEvictableIdleTimeMillis}" />
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
    </bean>
      
   	<!-- 连接工厂配置 --> 
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" > 
		  <property name="poolConfig" ref="poolConfig" /> 
		  <property name="hostName" value="${redis.hostName}" /> 
		  <property name="port" value="${redis.port}" /> 
		  <property name="password" value="${redis.password}" /> 
		  <property name="usePool" value="${redis.usePool}" />
		  <property name="timeout" value="${redis.timeout}" />
	</bean>
	
	<!-- 序列化器 -->
	<bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" /> 
	<!-- 使用jdk序列化方式，POJO bean必须实现Serializable，且提供getter/setter方法  -->
	<bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> 
	
	<!-- redis模版，提供了很多redis的api，而不需要自己来维护连接，事务 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" > 
		  <property name="connectionFactory" ref="connectionFactory" /> 
		  <property name="keySerializer" ref="stringSerializer" />
		  <property name="valueSerializer" ref="jdkSerializer" />
		  <property name="hashKeySerializer" ref="jdkSerializer" />
		  <property name="hashValueSerializer" ref="jdkSerializer" />
		  <!-- 是否启用事务支持 -->
		  <property name="enableTransactionSupport" value="true" />
	</bean>
	
	<!-- redis客户端单机 -->
	<!-- 
    <bean id="redisClient">
        <constructor-arg name="host" value="${redis.hostName}"></constructor-arg>
        <constructor-arg name="port" value="${redis.port}"></constructor-arg>
        <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>
    </bean>  
     -->
    <!-- redis集群 -->
    <!-- 
    <bean id="redisCluster">
        <constructor-arg name="nodes">
            <set>
                <bean>
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="7001"></constructor-arg>
                </bean>
                <bean>
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="7002"></constructor-arg>
                </bean>
            </set>
        </constructor-arg>
        <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>
    </bean>
     -->

</beans>