<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 隐式地向 Spring容器注册 -->
	<context:annotation-config />
	<mvc:annotation-driven />
	<aop:aspectj-autoproxy />
	
	<!-- 自动扫描所有注解该路径 -->
	<context:component-scan base-package="com.web" />
	
	<!-- Hibernate4 -->
	<!-- 加载资源文件 其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载 -->
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />

	<!-- 数据库映射 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.connection.driver_class">${hibernate.connection.driver_class}</prop>
		        <prop key="hibernate.connection.url">${hibernate.connection.url}</prop>
		        <prop key="hibernate.connection.username">${hibernate.connection.username}</prop>
		        <prop key="hibernate.connection.password">${hibernate.connection.password}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
			    <prop key="transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
			</props>
		</property>
		 -->
		<!-- 
		 <property name="mappingResources">
		 	<list>
		 		<value>com/web/entity/user.hbm.xml</value>
		 	</list>
		 </property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />  
		 -->
		<!-- 扫描实体类 -->
		<property name="packagesToScan">
			<list>
				<value>com.web.entity</value>
			</list>
		</property>
	</bean>

	<!-- 配置Hibernate事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
		
	<!-- 注解方式配置事物 -->
  	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" />
      		<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.web.service..*.*(..))" />
		<!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>

</beans>